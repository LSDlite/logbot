#!/usr/bin/perl

use strict;
use warnings;
use feature qw(say);
use autodie;

BEGIN {
    use File::Basename;
    use lib dirname(__FILE__) . '/lib';
}

# because we log times as UTC, force all our timezone dates to UTC
BEGIN { $ENV{TZ} = 'UTC' }

use DateTime;
use File::Basename;
use FileHandle;
use File::Path qw(make_path remove_tree);
use File::Slurp;
use LogBot;
use Mojo::Util;

# init

my $root = dirname(__FILE__);
LogBot::Config->init($root . '/logbot.conf');
my $config = LogBot::Config->instance;
my $static_path = "$root/www/static";

my $header = read_file("$root/www/static_header.html");
$header .= '<div id="static">';
my $footer = read_file("$root/www/static_footer.html");
$footer = '</div>' . $footer;

# generate text logs of events

foreach my $network ($config->networks) {
    my $network_path = "$static_path/" . $network->{network};

    foreach my $channel ($network->channels) {
        next unless $channel->{public};
        my $channel_name = $channel->{name};
        $channel_name =~ s/^#//;
        my $channel_path = $network_path . "/$channel_name";
        make_path($channel_path) unless -d $channel_path;

        # determine the date to start updating the logs from

        my $first_date;

        my @current_logs =
            sort { basename($a, '.html') cmp basename($b, '.html') }
            glob("$channel_path/*/*.html");
        if (@current_logs) {
            # use the date of the most recent log file as the first_date
            my $ymd = basename(pop @current_logs, '.html');
            my ($y, $m, $d) = $ymd =~ /^(\d\d\d\d)-(\d\d)-(\d\d)$/;
            die unless $y;
            $first_date = DateTime->new(
                year => $y, month => $m, day => $d,
            );

        } else {
            # no logs, use the first event's date
            my $first_event = $channel->first_event;
            next unless $first_event;
            $first_date = $first_event->datetime;

        }

        # determine the last date

        my $last_event  = $channel->last_event;
        my $last_date = $last_event->datetime
                                   ->clone()
                                   ->truncate(to => 'day')
                                   ->add(days => 1)
                                   ->add(nanoseconds => -1);

        # one file per date

        my $date = $first_date->clone()
                              ->truncate(to => 'day');
        while ($date < $last_date) {
            my $file_path = "$channel_path/" . $date->format_cldr('yyyy-MM');
            make_path($file_path) unless -d $file_path;
            my $file = "$file_path/" . $date->ymd('-') . '.html';
            my $fh = FileHandle->new;
            $fh->open(">> $file");
            $fh->print($header);

            my $end_date = $date->clone()
                                ->add(days => 1)
                                ->add(nanoseconds => -1);
            $channel->browse(
                date_after  => $date->epoch,
                date_before => $end_date->epoch,
                order       => 'time',
                callback    => sub {
                    my $event = shift;
                    my $log_string = $event->log_string;
                    Mojo::Util::xml_escape($log_string);
                    $fh->print($log_string . "<br>");
                },
            );

            $fh->print($footer);
            $fh->close();

            $date->add(days => 1);
        }
    }
}

